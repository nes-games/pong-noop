Playfield {
	
	$TOP : 16
	$BOTTOM : PPU.$SCREEN_HEIGHT_PX - 16
	$LEFT : 8
	$RIGHT : PPU.$SCREEN_WIDTH_PX - 8
	
	_$TILE_OFF : 0
	_$TILE_ON : 1
	_$SCORE_SPR_IDX : 6
	_$TEXT_SPR_IDX : 32
	
	paddle1 : Paddle{ number : 1 }
	paddle2 : Paddle{ number : 2 }
	ball : Ball
	
	score1 : 0
	score2 : 0
	
	reset() {
		score1 := 0
		score2 := 0
		
		_resetBallAndPaddles		
	}
	
	_resetBallAndPaddles() {
		ball.x := ($LEFT + $RIGHT - Ball.$WIDTH_PX) / 2 
		ball.y := ($TOP + $BOTTOM - Ball.$HEIGHT_PX) / 2
		ball.speedX := 0
		ball.speedY := 0
		ball.out := false
		
		paddle1.x := $LEFT
		paddle1.y := ($TOP + $BOTTOM - Paddle.$HEIGHT_PX) / 2
		paddle1.direction := 0
		
		paddle2.x := $RIGHT - Paddle.$WIDTH_PX 
		paddle2.y := ($TOP + $BOTTOM - Paddle.$HEIGHT_PX) / 2
		paddle2.direction := 0
	}
	
	restart() {
		_resetBallAndPaddles
		_drawBallAndPaddles
	}
	
	draw() {
		PPU.$hideBackground
		PPU.$hideSprites
		PPU.$update
		
		PPU.$setBackgroundPalettes(Pong.$PALETTES)
		PPU.$setSpritesPalettes(Pong.$PALETTES)
		
		// hide sprites
		for (i : 0; i < 64; ++i) {
			PPU.$drawSprite(i, 0, 0, 0, 0)
		}
		
		// clear screen
		for (row : 0; row < PPU.$SCREEN_HEIGHT_TILES; ++row) {
			for (col : 0; col < PPU.$SCREEN_WIDTH_TILES; ++col) {
				PPU.$drawBackgroundTile(PPU.$SCREEN_TOP_LEFT, row, col, _$TILE_OFF)
			}
		}
		
		// top and bottom borders
		for (col : 0; col < PPU.$SCREEN_WIDTH_TILES; ++col) {
			PPU.$drawBackgroundTile(PPU.$SCREEN_TOP_LEFT, 1, col, _$TILE_ON)
			PPU.$drawBackgroundTile(PPU.$SCREEN_TOP_LEFT, $BOTTOM / 8, col, _$TILE_ON)
		}
		
		// middle line
		for (row : $TOP / 8; row < Playfield.$BOTTOM / 8; row += 3) {
			PPU.$drawBackgroundTile(PPU.$SCREEN_TOP_LEFT, row, PPU.$SCREEN_WIDTH_TILES / 2 - 1, 2)
			PPU.$drawBackgroundTile(PPU.$SCREEN_TOP_LEFT, row, PPU.$SCREEN_WIDTH_TILES / 2, 3)
		}
		
		PPU.$paintBackground(PPU.$SCREEN_TOP_LEFT, Pong.$ATTR_TABLES[Pong.$palette])
		
		drawScore1
		drawScore2
		
		_drawBallAndPaddles
		
		PPU.$waitVBlank
		PPU.$showBackground
		PPU.$showSprites
		PPU.$update
	}
	
	_drawBallAndPaddles() {
		ball.draw
		paddle1.draw
		paddle2.draw
	}
	
	drawScore1() {
		_drawScore(1, ($LEFT + $RIGHT) / 4 - 12, score1)
	}
	
	drawScore2() {
		_drawScore(2, 3 * ($LEFT + $RIGHT) / 4 - 12, score2)
	}
	
	_drawScore(Byte player, Byte xOffset, Byte digit) {
		pal : Pong.$palette
		idx : _$SCORE_SPR_IDX + (player - 1) * 13 
		
		// draws an 8 using a 5x3 table of tiles
		// 1st line
		PPU.$drawSprite(idx + 0, xOffset + 00, 24, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 1, xOffset + 08, 24, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 2, xOffset + 16, 24, _$TILE_ON, pal)
		// 2nd line
		PPU.$drawSprite(idx + 3, xOffset + 00, 32, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 4, xOffset + 16, 32, _$TILE_ON, pal)
		// 3rd line
		PPU.$drawSprite(idx + 5, xOffset + 00, 40, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 6, xOffset + 08, 40, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 7, xOffset + 16, 40, _$TILE_ON, pal)
		// 4th line
		PPU.$drawSprite(idx + 8, xOffset + 00, 48, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 9, xOffset + 16, 48, _$TILE_ON, pal)
		// 5th line
		PPU.$drawSprite(idx + 10, xOffset + 00, 56, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 11, xOffset + 08, 56, _$TILE_ON, pal)
		PPU.$drawSprite(idx + 12, xOffset + 16, 56, _$TILE_ON, pal)

		//derivates all from 8

		if (digit = 0) {
			// 3rd line
			PPU.$drawSprite(idx + 6, xOffset + 08, 40, _$TILE_OFF, pal)
		} else if (digit = 1) {
			// 1st line
			PPU.$drawSprite(idx + 0, xOffset + 00, 24, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 1, xOffset + 08, 24, _$TILE_OFF, pal)
			// 2nd line
			PPU.$drawSprite(idx + 3, xOffset + 00, 32, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 5, xOffset + 00, 40, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 6, xOffset + 08, 40, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 8, xOffset + 00, 48, _$TILE_OFF, pal)
			// 5th line
			PPU.$drawSprite(idx + 10, xOffset + 00, 56, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 11, xOffset + 08, 56, _$TILE_OFF, pal)
		} else if (digit = 2) {
			// 2nd line
			PPU.$drawSprite(idx + 3, xOffset + 00, 32, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 9, xOffset + 16, 48, _$TILE_OFF, pal)
		} else if (digit = 3) {
			// 2nd line
			PPU.$drawSprite(idx + 3, xOffset + 00, 32, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 5, xOffset + 00, 40, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 8, xOffset + 00, 48, _$TILE_OFF, pal)
		} else if (digit = 4) {
			// 1st line
			PPU.$drawSprite(idx + 1, xOffset + 08, 24, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 8, xOffset + 00, 48, _$TILE_OFF, pal)
			// 5th line
			PPU.$drawSprite(idx + 10, xOffset + 00, 56, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 11, xOffset + 08, 56, _$TILE_OFF, pal)
		} else if (digit = 5) {
			// 2nd line
			PPU.$drawSprite(idx + 4, xOffset + 16, 32, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 8, xOffset + 00, 48, _$TILE_OFF, pal)
		} else if (digit = 6) {
			// 2nd line
			PPU.$drawSprite(idx + 4, xOffset + 16, 32, _$TILE_OFF, pal)
		} else if (digit = 7) {
			// 2nd line
			PPU.$drawSprite(idx + 3, xOffset + 00, 32, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 5, xOffset + 00, 40, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 7, xOffset + 16, 40, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 9, xOffset + 16, 48, _$TILE_OFF, pal)
			// 5th line
			PPU.$drawSprite(idx + 11, xOffset + 08, 56, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 12, xOffset + 16, 56, _$TILE_OFF, pal)
		} else if (digit = 9) {
			// 4th line
			PPU.$drawSprite(idx + 8, xOffset + 00, 48, _$TILE_OFF, pal)
		} else if (digit = 10) {
			// 5th line
			PPU.$drawSprite(idx + 11, xOffset + 08, 56, _$TILE_OFF, pal)
		} else if (digit = 11) {
			// 3rd line
			PPU.$drawSprite(idx + 7, xOffset + 16, 40, _$TILE_OFF, pal)
		} else if (digit = 12) {
			// 2nd line
			PPU.$drawSprite(idx + 4, xOffset + 16, 32, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 6, xOffset + 08, 40, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 7, xOffset + 16, 40, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 9, xOffset + 16, 48, _$TILE_OFF, pal)
		} else if (digit = 13) {
			// 1st line
			PPU.$drawSprite(idx + 2, xOffset + 16, 24, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 6, xOffset + 08, 40, _$TILE_OFF, pal)
			// 5th line
			PPU.$drawSprite(idx + 12, xOffset + 16, 56, _$TILE_OFF, pal)
		} else if (digit = 14) {
			// 2nd line
			PPU.$drawSprite(idx + 4, xOffset + 16, 32, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 7, xOffset + 16, 40, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 9, xOffset + 16, 48, _$TILE_OFF, pal)
		} else if (digit = 15) {
			// 2nd line
			PPU.$drawSprite(idx + 4, xOffset + 16, 32, _$TILE_OFF, pal)
			// 3rd line
			PPU.$drawSprite(idx + 7, xOffset + 16, 40, _$TILE_OFF, pal)
			// 4th line
			PPU.$drawSprite(idx + 9, xOffset + 16, 48, _$TILE_OFF, pal)
			// 5th line
			PPU.$drawSprite(idx + 11, xOffset + 08, 56, _$TILE_OFF, pal)
			PPU.$drawSprite(idx + 12, xOffset + 16, 56, _$TILE_OFF, pal)
		}
	}
	
	drawWinner() {
		paddle1.hide
		paddle2.hide
		ball.hide
		
		if (Pong.$matchVsCPU and score2 > score1) {
			return _drawCpuWins
		}
		
		pal : Pong.$palette
		x : (PPU.$SCREEN_WIDTH_PX - 8 * 8) / 2
		y : ($TOP + $BOTTOM) / 2 - 17
		p : '1'
		
		if (score2 > score1) {
			p := '2'
		}
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 0, x, y, 'P', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 1, x += 8, y, 'L', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 2, x += 8, y, 'A', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 3, x += 8, y, 'Y', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 4, x += 8, y, 'E', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 5, x += 8, y, 'R', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 6, x += 16, y, p, pal)
		
		x := (PPU.$SCREEN_WIDTH_PX - 4 * 8) / 2
		y := ($TOP + $BOTTOM) / 2
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 07, x, y, 'W', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 08, x += 8, y, 'I', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 09, x += 8, y, 'N', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 10, x += 8, y, 'S', pal)
	}
	
	_drawCpuWins() {
		pal : Pong.$palette
		x : (PPU.$SCREEN_WIDTH_PX - 3 * 8) / 2
		y : ($TOP + $BOTTOM) / 2 - 17
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 0, x, y, 'C', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 1, x += 8, y, 'P', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 2, x += 8, y, 'U', pal)
		
		x := (PPU.$SCREEN_WIDTH_PX - 4 * 8) / 2
		y := ($TOP + $BOTTOM) / 2
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 3, x, y, 'W', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 4, x += 8, y, 'I', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 5, x += 8, y, 'N', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 6, x += 8, y, 'S', pal)
	}
	
	drawGameOver() {
		pal : Pong.$palette
		x : (PPU.$SCREEN_WIDTH_PX - 4 * 8) / 2
		y : ($TOP + $BOTTOM) / 2 - 17
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 0, x, y, 'G', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 1, x + 08, y, 'A', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 2, x + 16, y, 'M', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 3, x + 24, y, 'E', pal)
		
		y := ($TOP + $BOTTOM) / 2
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 4, x, y, 'O', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 5, x + 08, y, 'V', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 6, x + 16, y, 'E', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 7, x + 24, y, 'R', pal)
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 08, 0, 0, _$TILE_OFF, pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 09, 0, 0, _$TILE_OFF, pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 10, 0, 0, _$TILE_OFF, pal)
	}
	
	drawPause() {
		pal : Pong.$palette
		x : (PPU.$SCREEN_WIDTH_PX - 5 * 8) / 2
		y : ($TOP + $BOTTOM) / 2
		
		PPU.$drawSprite(_$TEXT_SPR_IDX + 0, x, y, 'P', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 1, x += 8, y, 'A', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 2, x += 8, y, 'U', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 3, x += 8, y, 'S', pal)
		PPU.$drawSprite(_$TEXT_SPR_IDX + 4, x += 8, y, 'E', pal)
	}
	
	hidePause() {
		for (i : _$TEXT_SPR_IDX; i < _$TEXT_SPR_IDX + 5; ++i) {
			PPU.$drawSprite(i, 0, 0, 0, Pong.$palette)
		}
	}
}